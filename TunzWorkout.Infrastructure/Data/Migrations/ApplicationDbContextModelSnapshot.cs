// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TunzWorkout.Infrastructure.Data;

#nullable disable

namespace TunzWorkout.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TunzWorkout.Domain.Entities.EquipmentImages.EquipmentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentImages");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Equipments.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.ExerciseEquipments.ExerciseEquipment", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExerciseId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ExerciseEquipments");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.ExerciseMuscles.ExerciseMuscle", b =>
                {
                    b.Property<Guid>("MuscleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MuscleId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseMuscles");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Exercises.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasEquipment")
                        .HasColumnType("bit");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Images.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Levels.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.MuscleImages.MuscleImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MuscleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MuscleId");

                    b.ToTable("MuscleImages");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Muscles.Muscle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Muscles");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Videos.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.EquipmentImages.EquipmentImage", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Equipments.Equipment", "Equipment")
                        .WithMany("EquipmentImages")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.ExerciseEquipments.ExerciseEquipment", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Equipments.Equipment", "Equipment")
                        .WithMany("ExerciseEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TunzWorkout.Domain.Entities.Exercises.Exercise", "Exercise")
                        .WithMany("ExerciseEquipments")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.ExerciseMuscles.ExerciseMuscle", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Exercises.Exercise", "Exercise")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TunzWorkout.Domain.Entities.Muscles.Muscle", "Muscle")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Muscle");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Exercises.Exercise", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Levels.Level", "Level")
                        .WithMany("Exercises")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.MuscleImages.MuscleImage", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Muscles.Muscle", "Muscle")
                        .WithMany("MuscleImages")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Muscle");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Videos.Video", b =>
                {
                    b.HasOne("TunzWorkout.Domain.Entities.Exercises.Exercise", "Exercise")
                        .WithMany("Videos")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Equipments.Equipment", b =>
                {
                    b.Navigation("EquipmentImages");

                    b.Navigation("ExerciseEquipments");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Exercises.Exercise", b =>
                {
                    b.Navigation("ExerciseEquipments");

                    b.Navigation("ExerciseMuscles");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Levels.Level", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("TunzWorkout.Domain.Entities.Muscles.Muscle", b =>
                {
                    b.Navigation("ExerciseMuscles");

                    b.Navigation("MuscleImages");
                });
#pragma warning restore 612, 618
        }
    }
}
